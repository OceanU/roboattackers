{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","username","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uUAeeA,EAbF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACrC,OACC,yBAAKC,UAAU,0EACd,yBAAKC,IAAI,YAAYC,IAAG,iDAA6CH,EAA7C,mBACxB,yBAAKC,UAAU,MACd,wBAAIA,UAAU,OAAd,IAAsBJ,EAAtB,KACA,uBAAGI,UAAU,WAAb,IAAyBH,EAAzB,MACA,uBAAGG,UAAU,WAAb,IAAyBF,EAAzB,QCcWK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACC,6BAEAA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACAC,IAAKF,EAAKP,GACVA,GAAIK,EAAOG,GAAGR,GACdH,KAAMQ,EAAOG,GAAGX,KAChBC,SAAUO,EAAOG,GAAGV,SACpBC,MAAOM,EAAOG,GAAGT,aCENW,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAU,OACd,2BACCA,UAAU,kCACVW,KAAK,SACLC,YAAY,cACZC,SAAUH,MCECI,G,MARA,SAACC,GACf,OACA,yBAAKC,MAAQ,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,YCqBHC,G,kMASJC,KAAKP,MAAMQ,oB,+BAWH,MAEgDD,KAAKP,MAAtDS,EAFC,EAEDA,YAAaC,EAFZ,EAEYA,eAAgBrB,EAF5B,EAE4BA,OAAQsB,EAFpC,EAEoCA,UACrCC,EAAiBvB,EAAOwB,QAAO,SAAAC,GACrC,OAAOA,EAAMjC,KAAKkC,cAAcC,SAASP,EAAYM,kBAEtD,OAAOJ,EACN,0CAEC,yBAAK1B,UAAU,MACd,wBAAIA,UAAU,UAAd,oBACA,kBAAC,EAAD,CAAWU,aAAce,IAC3B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUrB,OAAQuB,U,GAjCJK,cAyCHC,eAzDQ,SAAAC,GACtB,MAAO,CACNV,YAAaU,EAAMC,aAAaX,YAChCpB,OAAQ8B,EAAME,cAAchC,OAC5BsB,UAAWQ,EAAME,cAAcV,UAC/BW,MAAOH,EAAME,cAAcC,UAIF,SAACC,GAC3B,MAAO,CACNb,eAAgB,SAACc,GAAD,OAAWD,ECdtB,CACN3B,KCTkC,sBDUlC6B,QDYoDD,EAAME,OAAOC,SAChEnB,gBAAiB,kBAAMe,GCTU,SAACA,GACnCA,EAAS,CAAE3B,KCb0B,2BDcrCgC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE3B,KCfW,yBDemB6B,QAASO,OAC/DC,OAAM,SAAAX,GAAK,OAAIC,EAAS,CAAE3B,KCfQ,wBDeqB6B,QAASH,cDiDpDJ,CAA6CZ,GGxDtD4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7B,QACfwB,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bb,OAAM,SAAAX,GACL8B,QAAQ9B,MAAM,4CAA6CA,MCzFjE,IAAMkC,EAAqB,CAC1B/C,YAAa,IAYRgD,EAAqB,CAC1B9C,WAAW,EACXtB,OAAQ,GACRiC,MAAO,ICXFoC,G,MAASC,0BAETC,EAAcC,YAAgB,CAACzC,aDHT,WAA2C,IAA1CD,EAAyC,uDAAnCqC,EAAqBM,EAAc,uDAAP,GAC9D,OAAOA,EAAOlE,MACb,IFbiC,sBEchC,OAAOmE,OAAOC,OAAO,GAAI7C,EAAO,CAACV,YAAaqD,EAAOrC,UACtD,QACC,OAAON,ICFyCE,cDYtB,WAA2C,IAA1CF,EAAyC,uDAAlCsC,EAAoBK,EAAc,uDAAP,GAC/D,OAAOA,EAAOlE,MACb,IF1BoC,yBE2BnC,OAAOmE,OAAOC,OAAO,GAAI7C,EAAO,CAAER,WAAW,IAC9C,IF3BoC,yBE4BnC,OAAOoD,OAAOC,OAAO,GAAI7C,EAAO,CAAE9B,OAAQyE,EAAOrC,QAASd,WAAW,IACtE,IF5BmC,wBE6BlC,OAAOoD,OAAOC,OAAO,GAAI7C,EAAO,CAAEG,MAAOwC,EAAOrC,QAASd,WAAU,IACpE,QACC,OAAOQ,MCpBJ8C,EACLC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAG3DW,IAASC,OACR,kBAAC,IAAD,CAAUL,MAAQA,GAClB,kBAAC,EAAD,OACYM,SAASC,eAAe,SFA9B,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,iBAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,iBAAN,sBAEPxC,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,GACHZ,MAAK,SAAAC,GAEJ,IAAMgD,EAAchD,EAASiD,QAAQC,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMtD,MAAK,SAAAiB,GACjCA,EAAasC,aAAavD,MAAK,WAC7BO,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1BT,OAAM,WACLmB,QAAQC,IACN,oEArFAiC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMtD,MAAK,WACjCuB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OEvB/BE,K","file":"static/js/main.ebb2ac39.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, username, email, id}) => {\r\n\treturn(\r\n\t\t<div className='bg-light-green dib br3 pa3 ma3 grow bw2 ba-m b--light-silver shadow-5 '>\r\n\t\t\t<img alt='cardImage' src= {`https://robohash.org/set_any/bgset_any/${id}?size=200x200`}/>\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h2 className=\"mb2\"> {name} </h2>\r\n\t\t\t\t<p className=\"mb3 mt3\">'{username}' </p>\r\n\t\t\t\t<p className=\"mt2 mb1\"> {email} </p>\r\n\t\t\t</div>\t\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\trobots.map((user, i) => {\r\n\t\t\treturn ( \r\n\t\t\t\t<Card \r\n\t\t\t\tkey={user.id} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\tusername={robots[i].username} \r\n\t\t\t\temail={robots[i].email} \r\n\t\t\t\t/>\r\n\t\t\t  );\r\n\t\t   })\r\n\t\t}\t\r\n\t\t</div>\r\n\t);\t\t\t\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pb4'>\r\n\t\t\t<input\r\n\t\t\t className='pa2 ba b--blue bg-lightest-blue'\r\n\t\t\t type='search' \r\n\t\t\t placeholder='Robo Search'\r\n\t\t\t onChange={searchChange}\t\r\n\t\t\t />\r\n\r\n\t\t</div>\t\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t<div style= {{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t{props.children}\r\n\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox' \r\nimport Scroll from '../components/Scroll';\r\n//import {robots} from './robots';\r\n// import ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions'\r\n\r\nconst mapStateToProps= state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor() {\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: []\r\n\t// \t}\r\n\t// }\r\n\r\n\tcomponentDidMount () {\r\n\t\tthis.props.onRequestRobots();\r\n\t// \tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t// \t.then(response=> response.json())\r\n\t// \t.then(users => {this.setState ({robots: users})});\t\r\n\r\n\t  }\r\n\r\n\t// onSearchChange = (event) => {\r\n\t// \tthis.setState({searchfield: event.target.value})\r\n\t// }\r\n\r\n\trender() {\r\n\t\t// const {robots} = this.state; changed down\r\n\t\tconst {searchField, onSearchChange, robots, isPending}= this.props;\r\n\t\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn isPending ? \r\n\t\t\t<h1>Loading...</h1>:\r\n\t\t( \r\n\t  \t<div className='tc'>\r\n\t\t  \t<h1 className='f1 pa4'> Robo attackers </h1>\r\n\t\t  \t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t  );\t\r\n\t}\r\n  }\t\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField =  (text) => {\r\n\treturn{\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\t\r\n\t}\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch , action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\t\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state= initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\t\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending:false})\t\r\n\t\tdefault:\r\n\t\t\treturn state;\t\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots, requestRobots} from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = \r\n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\n\r\nReactDOM.render(\r\n\t<Provider store= {store}>\r\n\t<App /> \r\n\t</Provider>,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}